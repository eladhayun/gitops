apiVersion: apps/v1
kind: Deployment
metadata:
  name: ids-backend
  labels:
    app: ids-backend
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: ids-backend
  template:
    metadata:
      labels:
        app: ids-backend
    spec:
      # Init container to verify SSH connectivity and setup
      initContainers:
      - name: ssh-connectivity-check
        image: alpine/socat:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Installing SSH client and netcat..."
          apk add --no-cache openssh-client netcat-openbsd &&
          mkdir -p /root/.ssh &&
          cp /etc/ssh-key/ssh-private-key /root/.ssh/id_rsa &&
          chmod 600 /root/.ssh/id_rsa &&
          echo "StrictHostKeyChecking no" > /root/.ssh/config &&
          echo "Testing SSH connectivity to ${SSH_HOST}:${SSH_PORT}..." &&
          ssh -o ConnectTimeout=10 -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} "echo 'SSH connection successful'" &&
          echo "SSH connectivity verified successfully"
        env:
        - name: SSH_HOST
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: SSH_HOST
        - name: SSH_PORT
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: SSH_PORT
        - name: SSH_USER
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: SSH_USER
        volumeMounts:
        - name: ssh-key
          mountPath: /etc/ssh-key
          readOnly: true
        - name: shared-data
          mountPath: /shared
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      containers:
      # SSH tunnel sidecar container
      - name: ssh-tunnel
        image: alpine/socat:latest
        command:
        - /bin/sh
        - -c
        - |
          apk add --no-cache openssh-client netcat-openbsd &&
          mkdir -p /root/.ssh &&
          cp /etc/ssh-key/ssh-private-key /root/.ssh/id_rsa &&
          chmod 600 /root/.ssh/id_rsa &&
          echo "StrictHostKeyChecking no" > /root/.ssh/config &&
          echo "Starting SSH tunnel..." &&
          ssh -N -L ${LOCAL_PORT}:${REMOTE_HOST}:${REMOTE_PORT} -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} &
          SSH_PID=$! &&
          echo "SSH tunnel started with PID $SSH_PID" &&
          echo "Waiting for tunnel to be ready..." &&
          for i in $(seq 1 30); do
            if nc -z localhost ${LOCAL_PORT}; then
              echo "SSH tunnel is ready!" &&
              touch /shared/tunnel-ready &&
              break
            fi
            echo "Attempt $i/30: Tunnel not ready yet, waiting..." &&
            sleep 1
          done &&
          if [ ! -f /shared/tunnel-ready ]; then
            echo "ERROR: SSH tunnel failed to become ready after 30 seconds" &&
            exit 1
          fi &&
          echo "SSH tunnel established successfully, keeping it alive..." &&
          wait $SSH_PID
        env:
        - name: SSH_HOST
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: SSH_HOST
        - name: SSH_PORT
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: SSH_PORT
        - name: SSH_USER
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: SSH_USER
        - name: LOCAL_PORT
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: LOCAL_PORT
        - name: REMOTE_HOST
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: REMOTE_HOST
        - name: REMOTE_PORT
          valueFrom:
            configMapKeyRef:
              name: ids-backend-config
              key: REMOTE_PORT
        volumeMounts:
        - name: ssh-key
          mountPath: /etc/ssh-key
          readOnly: true
        - name: shared-data
          mountPath: /shared
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "test -f /shared/tunnel-ready"
          initialDelaySeconds: 5
          periodSeconds: 5
      # Main application container
      - name: ids-backend
        image: prodacr1234.azurecr.io/ids-backend:main-6ad91de
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: ids-backend-config
        - secretRef:
            name: ids-backend-secrets
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "test -f /shared/tunnel-ready"
          initialDelaySeconds: 2
          periodSeconds: 2
          failureThreshold: 60
        livenessProbe:
          httpGet:
            path: /api/healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: ssh-key
        secret:
          secretName: ids-backend-secrets
          items:
          - key: SSH_PRIVATE_KEY
            path: ssh-private-key
          defaultMode: 0600
      - name: shared-data
        emptyDir: {}

